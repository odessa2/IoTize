{
  "iotize-schema-version" : "1.0",
  "name": "WiFiClientChangeable",
  "description": "code for establishing wifi connection and entering new credentials upon change of location. Default SSID/Password: esp8266Conf",
  "implements": "wificlient",
  "hardware": false,
  "type": "software",
  "dependency": "null",
  "librarys" : ["ArduinoJson"],
  "parameter": {
    "parameter": [
        {"name":"wificlienthostname", "description":{"en": "Hostname for your IoT Device"}}
    ]
  },
  "values": [
    {"name":"ipAdress", "description":{"en": "IP Adress of your IoT Device"}}

  ],
  "sourceskel": {
    "includes": "#include <FS.h>\n#include <ArduinoJson.h>\n#include <ESP8266WiFi.h>\n#include <string.h>\n#include <ESP8266WebServer.h>\n#include <ESP8266mDNS.h>\n#include <DNSServer.h>\n#include <ESP8266WebServer.h>\n",
    "declarations": "const char* wificlienthostname   = \"$wificlienthostname\";\nESP8266WebServer server(80);\nDNSServer dnsServer;\nconst byte DNS_PORT = 53;\nboolean configure = false;\nconst String configHTML=\"<form class=\\\"form-signin\\\" action=\\\"http://192.168.1.1/\\\" method=\\\"get\\\"><h2 class=\\\"form-signin-heading\\\">WiFi Conf:</h2><label for=\\\"Zeile1\\\" class=\\\"sr-only\\\"></label><input id=\\\"Zeile1\\\" name=\\\"ssid\\\" maxlength=\\\"20\\\" class=\\\"form-control\\\" placeholder=\\\"ssid\\\" autofocus=\\\"\\\" type=\\\"text\\\"></br><label for=\\\"Zeile2\\\" class=\\\"sr-only\\\"></label><input id=\\\"Zeile2\\\" name=\\\"password\\\" maxlength=\\\"20\\\" class=\\\"form-control\\\" placeholder=\\\"password\\\" type=\\\"text\\\"><br/><button class=\\\"btn btn-lg btn-primary btn-block\\\" type=\\\"submit\\\">submit</button></form>\";",
    "functions": "void writeWifiConfig(String ssid, String password) {\n\tString base = \"{\\\"ssid\\\":\\\"WIFINAME\\\",\\\"password\\\": \\\"KEY\\\"}\";\n\tSPIFFS.begin();\n\n\tFile f = SPIFFS.open(\"/wificonf.json\", \"w\");\n\tif (!f) {\n\t\tSerial.println(\"file open failed\");\n\t}\n\tSerial.println(\"====== Writing to SPIFFS file =========\");\n\tbase.replace(\"WIFINAME\", ssid);\n\tbase.replace(\"KEY\", password);\n\tSerial.println(base);\n\tf.println(base);\n\tf.close();\n\tSPIFFS.end();\n}\n\nvoid readWifiConfigAndConnect() {\n\tStaticJsonBuffer<1024> jsonBuffer;\n\tSerial.println(\"\");\n\tSPIFFS.begin();\n\t// read SPIFFS\n\tFile f = SPIFFS.open(\"/wificonf.json\", \"r\");\n\tdelay(10);\n\tif (!f) {\n\t\tSerial.println(\"file open failed\");\n\t}\n\tString s = f.readString();\n\tf.close();\n\tSPIFFS.end();\n\tSerial.println(s);\n\n\tJsonObject& root = jsonBuffer.parseObject(s);\n\tif (!root.success()) {\n\t\tSerial.println(\"parseObject() failed\");\n\t\twifiConfigMode();\n\t\treturn;\n\t}\n\tconst char* ssid = root[\"main\"];\n\tconst char* password = root[\"password\"];\n\tSerial.println(\"\\nConfig:\");\n\n\tSerial.println(ssid);\n\tSerial.println(password);\n\n\tdelay(10);\n\tSerial.println();\n\tSerial.print(\"Connecting to \");\n\tSerial.println(ssid);\n\tWiFi.mode(WIFI_STA);\n\tWiFi.disconnect();\n\tWiFi.begin(ssid, password);\n\tint counter = 0;\n\twhile (WiFi.status() != WL_CONNECTED) {\n\t\tdelay(500);\n\t\tSerial.print(\".\");\n\t\tcounter++;\n\t\tif (counter == 120) {\n\t\t\tcounter = 0;\n\t\t\tSerial.print(\"Configuring access point...\");\n\t\t\tconfigure = true;\n\t\t\tSerial.println(\"\");\n\t\t\tSerial.println(\"WiFi configuration mode\");\n\t\t\twifiConfigMode();\n\n\t\t}\n\t\tif (configure) break;\n\t}\n\tif (configure == false) {\n\t\tSerial.println(\"\");\n\t\tSerial.println(\"WiFi connected\");\n\t\tSerial.println(\"IP address: \");\n\t\tSerial.println(WiFi.localIP());\n\t}\n}\n\nvoid wifiConfigMode() {\n\tIPAddress ip(192, 168, 1, 1);\n\tIPAddress NMask(255, 255, 255, 0);\n\tWiFi.mode(WIFI_AP);\n\tWiFi.softAPConfig(ip, ip, NMask);\n\tWiFi.softAP(\"esp8266Conf\", \"esp8266Conf\");\n\n\tdnsServer.setErrorReplyCode(DNSReplyCode::NoError);\n\tdnsServer.start(DNS_PORT, \"*\", ip);\n\n\tserver.on(\"/\", handleRoot);\n\tserver.on(\"/generate_204\", handleRoot);\n\tserver.onNotFound([]() {\n\t\tserver.send(200, \"text/html\",configHTML);\n\t});\n\tserver.begin();\n\tSerial.println(\"Server Started\");\n}\n\nvoid handleRoot() {\n\tString ssid = server.arg(\"ssid\"); \n\tString password = server.arg(\"password\"); \n\n\tif (ssid.length() > 0 && password.length() > 0) {\n\t\tSerial.println(ssid);\n\t\tSerial.println(password);\n\n\t\t// send reply to client\n\t\twriteWifiConfig(ssid, password);\n\t\tserver.send(200, \"text/html\", \"Done! Der Accesspoint wird jetzt geschlossenn..\");\n\n\t\t// disable wifi\n\t\tWiFi.mode(WIFI_OFF);\n\t\tconfigure = false;\n\t\treadWifiConfigAndConnect();\n\t\tserver.stop();\n\t\tdnsServer.stop();\n\t} else\n\t\tserver.send(200, \"text/html\",configHTML);\n}\n",
    "setup": "\tWiFi.hostname(wificlienthostname);\n\treadWifiConfigAndConnect();\n",
    "loop": "\tif (configure == true) {\n\t\tserver.handleClient();\n\t\tdnsServer.processNextRequest();\n\t}\n"
  }
}